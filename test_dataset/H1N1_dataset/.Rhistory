is_square(1)
#create class
shape_s3 <- function(side_lengths){
structure(list(side_lengths = side_lengths), class = "shape_S3")
}
shape_s3 <- function(side_lengths){
structure(list(side_lengths = side_lengths), class = "shape_S3")
}
#craete objects
square_4 <- shape_s3(c(4, 4, 4, 4))
class(square_4)
triangle_3 <- shape_s3(c(3, 3, 3))
class(triangle_3)
#abstract method
is_square <- function(x) UseMethod("is_square")
#abstract method applying on project.
is_square.shape_s3  <- function(x){
length(x$side_lengths) == 4 &&
x$side_lengths[1] == x$side_lengths[2] &&
x$side_lengths[2] == x$side_lengths[3] &&
x$side_lengths[3] == x$side_lengths[4]
}
is_square.shape_s3(square_4)
is_square.shape_s3(triangle_3)
#set defult value
is_square.default <- function(x){
NA
}
is_square(1)
print.shape_S3 <- function(x){
if(length(x$side_lengths) == 3){
paste("A triangle with side lengths of", x$side_lengths[1],
x$side_lengths[2], "and", x$side_lengths[3])
} else if(length(x$side_lengths) == 4) {
if(is_square(x)){
paste("A square with four sides of length", x$side_lengths[1])
} else {
paste("A quadrilateral with side lengths of", x$side_lengths[1],
x$side_lengths[2], x$side_lengths[3], "and", x$side_lengths[4])
}
} else {
paste("A shape with", length(x$side_lengths), "slides.")
}
}
print(square_4)
print.shape_S3 <- function(x){
if(length(x$side_lengths) == 3){
paste("A triangle with side lengths of", x$side_lengths[1],
x$side_lengths[2], "and", x$side_lengths[3])
} else if(length(x$side_lengths) == 4) {
if(is_square(x)){
paste("A square with four sides of length", x$side_lengths[1])
} else {
paste("A quadrilateral with side lengths of", x$side_lengths[1],
x$side_lengths[2], x$side_lengths[3], "and", x$side_lengths[4])
}
} else {
paste("A shape with", length(x$side_lengths), "slides.")
}
}
print(square_4)
debugince(print(square_4))
debugonce(print(square_4))
print.shape_S3 <- function(x){
if(length(x$side_lengths) == 3){
paste("A triangle with side lengths of", x$side_lengths[1],
x$side_lengths[2], "and", x$side_lengths[3])
} else if(length(x$side_lengths) == 4) {
if(is_square(x))
{
paste("A square with four sides of length", x$side_lengths[1])
} else {
paste("A quadrilateral with side lengths of", x$side_lengths[1],
x$side_lengths[2], x$side_lengths[3], "and", x$side_lengths[4])
}
} else {
paste("A shape with", length(x$side_lengths), "slides.")
}
}
print(square_4)
#specify a print method for the shape_S3 class:
print.shape_S3 <- function(x){
if(length(x$side_lengths) == 3){
paste("A triangle with side lengths of", x$side_lengths[1],
x$side_lengths[2], "and", x$side_lengths[3])
} else if(length(x$side_lengths) == 4) {
if(is_square(x))
{paste("A square with four sides of length", x$side_lengths[1])
} else {
paste("A quadrilateral with side lengths of", x$side_lengths[1],
x$side_lengths[2], x$side_lengths[3], "and", x$side_lengths[4])
}
} else {
paste("A shape with", length(x$side_lengths), "slides.")
}
}
print(square_4)
print.shape_S3 <- function(x){
if(length(x$side_lengths) == 3){
paste("A triangle with side lengths of", x$side_lengths[1],
x$side_lengths[2], "and", x$side_lengths[3])
} else if(length(x$side_lengths) == 4) {
if(is_square(x)){
paste("A square with four sides of length", x$side_lengths[1])
} else {
paste("A quadrilateral with side lengths of", x$side_lengths[1],
x$side_lengths[2], x$side_lengths[3], "and", x$side_lengths[4])
}
} else {
paste("A shape with", length(x$side_lengths), "slides.")
}
}
#create class
shape_S3 <- function(side_lengths){
structure(list(side_lengths = side_lengths), class = "shape_S3")
}
#craete objects
square_4 <- shape_S3(c(4, 4, 4, 4))
class(square_4)
triangle_3 <- shape_S3(c(3, 3, 3))
class(triangle_3)
#abstract method
is_square <- function(x) UseMethod("is_square")
#abstract method applying on project.
is_square.shape_S3  <- function(x){
length(x$side_lengths) == 4 &&
x$side_lengths[1] == x$side_lengths[2] &&
x$side_lengths[2] == x$side_lengths[3] &&
x$side_lengths[3] == x$side_lengths[4]
}
is_square.shape_S3(square_4)
is_square.shape_S3(triangle_3)
#set defult value
is_square.default <- function(x){
NA
}
is_square(1)
print(square_4)$side_lengths
#specify a print method for the shape_S3 class:
print.shape_S3 <- function(x){
if(length(x$side_lengths) == 3){
paste("A triangle with side lengths of", x$side_lengths[1],
x$side_lengths[2], "and", x$side_lengths[3])
} else if(length(x$side_lengths) == 4) {
if(is_square(x)){
paste("A square with four sides of length", x$side_lengths[1])
} else {
paste("A quadrilateral with side lengths of", x$side_lengths[1],
x$side_lengths[2], x$side_lengths[3], "and", x$side_lengths[4])
}
} else {
paste("A shape with", length(x$side_lengths), "slides.")
}
}
print(square_4)
print(triangle_3)
class(square_4) <- c("shape_S3", "square")
inherits(square_4)
inherits(square_4,"square")
make_poly <- function(x, y) {
if(length(x) != length(y))
stop("'x' and 'y' should be the same length")
## Create the "polygon" object
object <- list(xcoord = x, ycoord = y)
## Set the class name
class(object) <- "polygon"
object
}
## Print method for polygon objects
## x an object of class "polygon"
print.polygon <- function(x, ...) {
cat("a polygon with", length(x$xcoord),
"vertices\n")
invisible(x)
}
summary.polygon <- function(object, ...) {
object <- list(rng.x = range(object$xcoord),
rng.y = range(object$ycoord))
class(object) <- "summary_polygon"
object
}
## Print method for summary.polygon objects
## x an object of class "summary_polygon"
print.summary_polygon <- function(x, ...) {
cat("x:", x$rng.x[1], "-->", x$rng.x[2], "\n")
cat("y:", x$rng.y[1], "-->", x$rng.y[2], "\n")
invisible(x)
}
## Construct a new "polygon" object
x <- make_poly(1:4, c(1, 5, 2, 1))
print(x)
summary(x)
a=summary(x)
print(a)
Check <- function(expr){
tryCatch(expr,
error = function(e){
message("An error occurred:\n", e)
},
warning = function(w){
message("A warning occured:\n", w)
},
finally = {
message("Finally done!")
})
}
exp=quote(a=2+2, b=a+4)
exp=quote('a=2+2\n b=a+t')
Check(exp)
Check(eavl(exp))
exp=quote('a=2+2\n b=a+t')
Check(eval(exp))
eval(exp)
exp=quote(a=2+2\n b=a+t)
exp=quote('a=2+2\n b=a+t')
Check(eval(parse(exp)))
Check(eval(parse(text=exp)))
exp=quote('a=2+2\n b=a+t\n a=a+2')
Check(eval(parse(text=exp)))
exp=quote('a=2+2\n b=a+t\n a=a+2\n print(a)')
Check(eval(parse(text=exp)))
try(eval(parse(text=exp)))
try('a=2+2\n b=a+t\n a=a+2\n print(a)')
test=function(a)
{
a=2+2
b=a+t
a=a+2
print(a)
}
try(test(0))
test=function(a)
{
a=2+2
b=a+t
a=a+2
print(a)
}
try(test(0),silent = FALSE)
test=function()
{
for(i in c(1,2,3,"w",5))
{
i=i+1
print(i)
}
}
try(test(),silent = FALSE)
try(test(),silent = T)
4%%3
test=function()
{
for(i in c(1,2,3,"w",5))
{
i=2+1
print(i)
}
}
try({
for(i in c(1,2,3,"w",5))
{
i=2+1
print(i)
}
},silent = T)
try({
for(i in c(1,2,3,"w",5))
{
i=i+1
print(i)
}
},silent = T)
try({
for(i in c(1,2,3,"w",5))
{
i=i+1
print(i)
}
},silent = T)
try({
for(i in c(1,2,3,"w",5))
{
a=i+1
print(a)
}
},silent = T)
try({
for(i in c(1,2,3,"w",5))
{
a=i+1
print(a)
}
},silent = F)
for (i in 1:10) {
tryCatch({
print(i)
if (i==7) stop("Urgh, the iphone is in the blender !")
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
}
beera <- function(expr){
tryCatch(expr,
error = function(e){
cat("ERROR :",conditionMessage(e), "\n")
},
warning = function(w){
message("A warning occured:\n", w)
},
finally = {
message("Finally done!")
})
}
beera({for (i in 1:10) {
print(i)
if (i==7) stop("Urgh, the iphone is in the blender !")
}})
beera <- function(expr){
tryCatch(expr,
error = function(e){
cat("ERROR :",conditionMessage(e), "\n")
},
warning = function(w){
message("A warning occured:\n", w)
})
}
beera({for (i in 1:10) {
print(i)
if (i==7) stop("Urgh, the iphone is in the blender !")
}})
for (i in 1:10) {
tryCatch({
print(i)
if (i==7) stop("Urgh, the iphone is in the blender !")
}, error=function(e){})
}
for (i in 1:10) {
tryCatch({
print(i)
if (i==7) stop("Urgh, the iphone is in the blender !")
}, error=function(e){})
}
for (i in c(1,2,"r",3)) {
tryCatch({
a=i
print(a)
if (i==7) stop("Urgh, the iphone is in the blender !")
}, error=function(e){})
}
my_bus
my_bus <- new("bus_S4", n_seats = 20, top_speed = 80,
current_speed = 0, brand = "Volvo")
my_bus
setClass("party_bus_S4",
slots = list(n_subwoofers = "numeric",
smoke_machine_on = "logical"),
contains = "bus_S4")
setClass("bus_S4",
slots = list(n_seats = "numeric",
top_speed = "numeric",
current_speed = "numeric",
brand = "character"))
setClass("party_bus_S4",
slots = list(n_subwoofers = "numeric",
smoke_machine_on = "logical"),
contains = "bus_S4")
my_bus <- new("bus_S4", n_seats = 20, top_speed = 80,
current_speed = 0, brand = "Volvo")
my_bus
my_party_bus <- new("party_bus_S4", n_seats = 10, top_speed = 100,
current_speed = 0, brand = "Mercedes-Benz",
n_subwoofers = 2, smoke_machine_on = FALSE)
my_party_bus
my_bus@n_seats
my_bus@n_seats
my_party_bus@top_speed
is_bus_moving(my_bus)
setMethod("is_bus_moving",
c(x = "bus_S4"),
function(x){
x@current_speed > 0
})
setGeneric("is_bus_moving", function(x){
standardGeneric("is_bus_moving")
})
setMethod("is_bus_moving",
c(x = "bus_S4"),
function(x){
x@current_speed > 0
})
is_bus_moving(my_bus)
is_bus_moving(my_party_bus)
my_bus@current_speed <-1
is_bus_moving(my_bus)
setGeneric("print")
b <- c(12, 18, 6)
lapply(b, sqrt)
walk(lapply(b, sqrt))
library("purrr")
walk(lapply(b, sqrt))
walk(c(b,sqrt),lapply)
traceback()
#create class: students
Student <- setRefClass("Student",
fields = list(name = "character",
grad_year = "numeric",
credits = "numeric",
id = "character",
courses = "list"),
methods = list(
hello = function(){
paste("Hi! My name is", name)
},
add_credits = function(n){
credits <<- credits + n
},
get_email = function(){
paste0(id, "@jhu.edu")
}
))
brooke <- Student$new(name = "Brooke", grad_year = 2019, credits = 40,
id = "ba123", courses = list("Ecology", "Calculus III"))
roger <- Student$new(name = "Roger", grad_year = 2020, credits = 10,
id = "rp456", courses = list("Puppetry", "Elementary Algebra"))
brooke$credits
roger$hello()
roger$get_email()
brooke$add_credits(4)
brooke$credits
Grad_Student <- setRefClass("Grad_Student",
contains = "Student",
fields = list(thesis_topic = "character"),
methods = list(
defend = function(){
paste0(thesis_topic, ". QED.")
}
))
jeff <- Grad_Student$new(name = "Jeff", grad_year = 2021, credits = 8,
id = "jl55", courses = list("Fitbit Repair",
"Advanced Base Graphics"),
thesis_topic = "Batch Effects")
jeff$defend()
jeff$hello()
gc()
l=read.table("Samplesize50_r1_TansmissionPairs.csv",sep = ",",header = TRUE)
setwd("C:/Users/Bowen Zheng/Desktop/Publication/Santa-sim/Simulated_data_plot/ValidationCo/ntrol_git_ViralBottleneck/ViralBottleneck_t/test_dataset/H1N1_dataset")
setwd("C:/Users/Bowen Zheng/Desktop/Publication/Santa-sim/Simulated_data_plot/ValidationControl_git_ViralBottleneck/ViralBottleneck_t/test_dataset/H1N1_dataset")
setwd("C:/Users/Bowen Zheng/Desktop/Publication/Santa-sim/Simulated_data_plot/Validation/Control_git_ViralBottleneck/ViralBottleneck_t/test_dataset/H1N1_dataset")
t_p= read.csv("H1N1_transmission_pairs.csv", sep = " ")
View(t_p)
library(ViralBottleneck)
ob_H=ViralBottleneck::CreateTransmissionObject(t_p)
x=ViralBottleneck::Bottleneck_size_Calculation(ob_H,method ="KL",error_calling = 0,variant_calling = 0.03,Nbmin = 1,Nbmax = 400,show_table =TRUE,donor_depth_threshold = 0,recipient_depth_threshold = 0  )
x1=ViralBottleneck::Bottleneck_size_Calculation(ob_H,method ="Presence-Absence",error_calling = 0,variant_calling = 0.03,Nbmin = 1,Nbmax = 400,show_table =TRUE,donor_depth_threshold = 0,recipient_depth_threshold = 0  )
x2=ViralBottleneck::Bottleneck_size_Calculation(ob_H,method ="Binomial",error_calling = 0,variant_calling = 0.03,Nbmin = 1,Nbmax = 400,show_table =TRUE,donor_depth_threshold = 0,recipient_depth_threshold = 0  )
x3=ViralBottleneck::Bottleneck_size_Calculation(ob_H,method ="Beta_binomial_Approximate",error_calling = 0,variant_calling = 0.03,Nbmin = 1,Nbmax = 400,show_table =TRUE,donor_depth_threshold = 0,recipient_depth_threshold = 0  )
x4=ViralBottleneck::Bottleneck_size_Calculation(ob_H,method ="Beta_binomial_Exact",error_calling = 0,variant_calling = 0.03,Nbmin = 1,Nbmax = 400,show_table =TRUE,donor_depth_threshold = 0,recipient_depth_threshold = 0  )
all_methods <-
c("KL", "Presence-Absence", "Binomial", "Beta_binomial_Approximate", "Beta_binomial_Exact")
compare_methods <-
t(sapply(all_methods, function(m){
Bottleneck_size_Calculation(ob_H[1], method = m)
}))
compare_methods <-
t(sapply(all_methods, function(m){
Bottleneck_size_Calculation(ob_H[1], method = m,error_calling = 0,variant_calling = 0.03,Nbmin = 1,Nbmax = 400,show_table =TRUE,donor_depth_threshold = 0,recipient_depth_threshold = 0 )
}))
all_methods <-
c("KL", "Presence-Absence", "Binomial", "Beta_binomial_Approximate", "Beta_binomial_Exact")
compare_methods <-
t(sapply(all_methods, function(m){
Bottleneck_size_Calculation(ob_H[1], method = m,error_calling = 0,variant_calling = 0.03,Nbmin = 1,Nbmax = 400,show_table =TRUE,donor_depth_threshold = 0,recipient_depth_threshold = 0 )
}))
all_methods <-
c("KL", "Presence-Absence", "Binomial", "Beta_binomial_Approximate", "Beta_binomial_Exact")
compare_methods <-
t(sapply(all_methods, function(m){
Bottleneck_size_Calculation(ob_H[1],error_calling = 0,variant_calling = 0.03,Nbmin = 1,Nbmax = 400,show_table =TRUE,donor_depth_threshold = 0,recipient_depth_threshold = 0 , method = m)
}))
all_methods <-
c("KL", "Presence-Absence", "Binomial", "Beta_binomial_Approximate", "Beta_binomial_Exact")
compare_methods <-
t(sapply(all_methods, function(m){
Bottleneck_size_Calculation(ob_H[[1]],error_calling = 0,variant_calling = 0.03,Nbmin = 1,Nbmax = 400,show_table =TRUE,donor_depth_threshold = 0,recipient_depth_threshold = 0 , method = m)
}))
all_methods <-
c("KL", "Presence-Absence", "Binomial", "Beta_binomial_Approximate", "Beta_binomial_Exact")
compare_methods <-
t(sapply(all_methods, function(m){
Bottleneck_size_Calculation(ob_H[1],error_calling = 0,variant_calling = 0.03,Nbmin = 1,Nbmax = 400,donor_depth_threshold = 0,recipient_depth_threshold = 0 , method = m)
}))
compare_methods
write.csv(compare_methods,"compare_methods.csv")
all_methods <-
c("KL", "Presence-Absence", "Binomial", "Beta_binomial_Approximate", "Beta_binomial_Exact")
compare_methods <-
t(sapply(all_methods, function(m){
Bottleneck_size_Calculation(ob_H[2],error_calling = 0,variant_calling = 0.03,Nbmin = 1,Nbmax = 400,donor_depth_threshold = 0,recipient_depth_threshold = 0 , method = m)
}))
compare_methods
all_methods <-
c("KL", "Presence-Absence", "Binomial", "Beta_binomial_Approximate", "Beta_binomial_Exact")
compare_methods <-
t(sapply(all_methods, function(m){
Bottleneck_size_Calculation(ob_H[3],error_calling = 0,variant_calling = 0.03,Nbmin = 1,Nbmax = 400,donor_depth_threshold = 0,recipient_depth_threshold = 0 , method = m)
}))
compare_methods
all_methods <-
c("KL", "Presence-Absence", "Binomial", "Beta_binomial_Approximate", "Beta_binomial_Exact")
compare_methods <-
t(sapply(all_methods, function(m){
Bottleneck_size_Calculation(ob_H[4],error_calling = 0,variant_calling = 0.03,Nbmin = 1,Nbmax = 400,donor_depth_threshold = 0,recipient_depth_threshold = 0 , method = m)
}))
compare_methods
